#!/bin/bash
#
# Init script for graylog2-server
#
### BEGIN INIT INFO
# Provides:          graylog2-server
# Required-Start:    $remote_fs $syslog $network mongodb
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop graylog2-server
# Description:       Start/stop graylog2-server
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=$(basename $0)
DESC='Graylog2 Server'
JAR_FILE="/usr/share/graylog2-server/graylog2-server.jar"
DAEMON="/usr/bin/java"
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# load environments
if [ -r /etc/default/locale ]; then
  . /etc/default/locale
  export LANG LANGUAGE
elif [ -r /etc/environment ]; then
  . /etc/environment
  export LANG LANGUAGE
fi

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Check if all preconditions are met
#
do_preflight_check() {
  if [[ $(id -u) -ne 0 ]]; then
    log_failure_msg "The ${NAME} init script can only be run as root"
    return 1
  fi

  if [[ ! -x "${DAEMON}" ]]; then
    log_failure_msg "Cannot find executable ${DAEMON}"
    return 1
  fi

  if [[ ! -r "${JAR_FILE}" ]]; then
    log_failure_msg "Cannot read file ${JAR_FILE}"
    return 1
  fi

  if [[ ! -r "${CONFIG_FILE}" ]]; then
    log_failure_msg "Cannot read configuration file ${CONFIG_FILE}"
    return 1
  fi

  PIDDIR=$(dirname "${PIDFILE}")
  if [[ ! -d "${PIDDIR}" ]]; then
    log_failure_msg "Cannot open PID directory ${PIDDIR}"
    return 1
  fi

  $DAEMON -jar "${JAR_FILE}" -t -f "${CONFIG_FILE}" || return 2
}

do_start() {
  start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --background \
    --exec $DAEMON -- $JAVA_ARGS -jar $JAR_FILE $GRAYLOG2_ARGS || return 1
}

do_stop() {
  start-stop-daemon --stop --retry TERM/10/KILL/5 --quiet --oknodo --pidfile $PIDFILE 2>&1 >/dev/null
}

do_restart() {
  do_stop || return $?
  sleep 1
  do_start || return $?
}

case "$1" in
  start)
    log_begin_msg "Starting ${DESC}: "
    do_preflight_check || exit $?
    do_start && log_success_msg
    exit $?
    ;;
  stop)
    log_begin_msg "Stopping ${DESC}: "
    do_stop && log_success_msg
    exit $?
    ;;
  restart)
    log_begin_msg "Restarting ${DESC}: "
    do_restart && log_success_msg
    exit $?
    ;;
  status)
    status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
    exit $?
		;;
  *)
    echo "Usage: $0 {start|stop|status|restart}" >&2
    exit 3
    ;;
esac

# Safety net
exit 0
